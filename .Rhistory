spy <- c("spy")
spyw <- c(1)
num_months <- 120
num_sims <- 1500
symbols <- roth_symbols
w <- roth_weights
prices <-
getSymbols(symbols, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
asset_returns_long <-
prices %>%
to.monthly(indexAt = "lastof", OHLC = FALSE) %>%
tk_tbl(preserve_index = TRUE, rename_index = "date") %>%
gather(asset, returns, -date) %>%
group_by(asset) %>%
mutate(returns = (log(returns) - log(lag(returns)))) %>%
na.omit()
portfolio_returns_tq_rebalanced_yearly <-
asset_returns_long %>%
tq_portfolio(assets_col  = asset,
returns_col = returns,
weights     = w,
col_rename  = "returns",
rebalance_on = "years")
mean_port_return <-
mean(portfolio_returns_tq_rebalanced_yearly$returns)
stddev_port_return <-
sd(portfolio_returns_tq_rebalanced_yearly$returns)
simulated_monthly_returns <- rnorm(num_months,
mean_port_return,
stddev_port_return)
simulation_cumprod <- function(init_value, N, mean, stdev) {
tibble(c(init_value, 1 + rnorm(N, mean, stdev))) %>%
`colnames<-`("returns") %>%
mutate(growth = cumprod(returns)) %>%
select(growth)
}
simulated_returns_add_1 <-
tibble(c(1, 1 + simulated_monthly_returns)) %>%
`colnames<-`("returns")
simulated_growth <-
simulated_returns_add_1 %>%
mutate(growth1 = accumulate(returns, function(x, y) x * y),
growth2 = accumulate(returns, `*`),
growth3 = cumprod(returns)) %>%
select(-returns)
cagr <-
((simulated_growth$growth1[nrow(simulated_growth)]^
(1/10)) - 1) * 100
cagr <- round(cagr, 2)
# Running monte-carlo analysis
starts <-
rep(1, num_sims) %>%
set_names(paste("sim", 1:num_sims, sep = ""))
monte_carlo_sims <-
map_dfc(starts,
simulation_cumprod,
N = num_months,
mean = mean_port_return,
stdev = stddev_port_return)
ending_balances <- as.numeric(monte_carlo_sims[120,])
hist(ending_balances)
monte_carlo_sims <-
monte_carlo_sims %>%
mutate(month = seq(1:nrow(.))) %>%
select(month, everything()) %>%
`colnames<-`(c("month", names(starts))) %>%
mutate_all(funs(round(., 2)))
spy_sum <- sim_summary
spy_sum
monte_carlo_sims %>%
gather(sim, growth, -month) %>%
group_by(sim) %>%
ggplot(aes(x = month, y = growth, color = sim)) +
geom_line() +
theme(legend.position="none")
sim_summary <-
monte_carlo_sims %>%
gather(sim, growth, -month) %>%
group_by(sim) %>%
summarise(final = last(growth)) %>%
summarise(
max = max(final),
min = min(final),
median = median(final))
sim_summary
roth_summary
roth_sum
mc_gathered <-
monte_carlo_sims %>%
gather(sim, growth, -month) %>%
group_by(sim)
mc_max_med_min <-
mc_gathered %>%
filter(
last(growth) == sim_summary$max ||
last(growth) == sim_summary$median ||
last(growth) == sim_summary$min) %>%
group_by(sim)
covMat
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(plotly)
#Config
tickers <- c("AMZN", "LVMUY", "CELH",  #List of equities
"XOM", "TLT", "IAU",
"GSK", "GD", "LMT",
"NOC", "RTN", "PANW",
"TCEHY", "WDC")
start_date <- "2006-01-01" #Format 2016-01-01
#Calculate Returns: Daily -- gathering price data from yahoo, other sources available
portfolioPrices <- NULL
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
#Delete all dates with no prices -- removing data errors
portfolioPrices <- na.omit(portfolioPrices)
#Rename Columns -- making the data frame look prettier
colnames(portfolioPrices) <- tickers
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns)
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns)
meanReturns <- colMeans(portfolioReturns)
covMat <- cov(portfolioReturns)
#Old code that I was fiddling with, ignore this but dont remove it:
#weights <-c("minW= c(.1, .1,.1)", "maxW=c(.4,.4,.4)")
weights <-c("minW= c(.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05)",
"maxW=c(.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2)")
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns)
effFrontier <- portfolioFrontier(portfolioReturns, constraints = weights)
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns)
meanReturns <- colMeans(portfolioReturns)
covMat <- cov(portfolioReturns)
#Old code that I was fiddling with, ignore this but dont remove it:
#weights <-c("minW= c(.1, .1,.1)", "maxW=c(.4,.4,.4)")
weights <-c("minW= c(.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05)",
"maxW=c(.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2)")
effFrontier <- portfolioFrontier(portfolioReturns, constraints = weights)
tickers <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
start_date <- "2006-01-01" #Format 2016-01-01
return_target <- NULL #Format as decimal
risk_target <- NULL #Format as decimal
cash_amt = 0
#Calculate Returns: Daily -- gathering price data from yahoo, other sources available
portfolioPrices <- NULL
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(plotly)
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
#Delete all dates with no prices -- removing data errors
portfolioPrices <- na.omit(portfolioPrices)
#Rename Columns -- making the data frame look prettier
colnames(portfolioPrices) <- tickers
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns)
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns)
meanReturns <- colMeans(portfolioReturns)
covMat <- cov(portfolioReturns)
#Old code that I was fiddling with, ignore this but dont remove it:
weights <-c("minW= c(.1,.1,.1,.1,.1)", "maxW=c(.4,.4,.4,.4,.4)")
effFrontier <- portfolioFrontier(portfolioReturns, constraints = weights)
mvPort <- minvariancePortfolio(portfolioReturns, constraints = weights)
efficientPort <- efficientPortfolio(portfolioReturns, constraints = weights)
minRiskPort <- minriskPortfolio(portfolioReturns, constraints = weights)
frontierPlot(effFrontier, frontier=c("both"),
col=c("red", "green"),add=FALSE, labels=FALSE,
return=("mean"), risk=c("Sigma"), auto=TRUE,
title=TRUE)
effFrontier
library(tidyquant)
library(tidyverse)
library(timetk)
library(broom)
library(highcharter)
library(purrr)
library(tidyquant)
library(tidyverse)
library(timetk)
library(broom)
library(highcharter)
library(purrr)
roth_symbols <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
roth_weights <- c(.248, .167, .37, .079, .136)
spy <- c("spy")
spyw <- c(1)
num_months <- 120
num_sims <- 1500
symbols <- roth_symbols
w <- roth_weights
prices <-
getSymbols(symbols, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
asset_returns_long <-
prices %>%
to.monthly(indexAt = "lastof", OHLC = FALSE) %>%
tk_tbl(preserve_index = TRUE, rename_index = "date") %>%
gather(asset, returns, -date) %>%
group_by(asset) %>%
mutate(returns = (log(returns) - log(lag(returns)))) %>%
na.omit()
tickers <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(plotly)
tickers <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
start_date <- "2006-01-01" #Format 2016-01-01
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(plotly)
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
library(tidyquant)
library(tidyverse)
library(timeSeries)
library(timetk)
library(broom)
library(highcharter)
library(purrr)
library(PerformanceAnalytics)
library(tidyquant)
library(tidyverse)
library(timeSeries)
library(timetk)
library(broom)
library(highcharter)
library(purrr)
library(PerformanceAnalytics)
roth_symbols <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
roth_weights <- c(.248, .167, .37, .079, .136)
spy <- c("spy")
spyw <- c(1)
num_months <- 120
num_sims <- 1500
symbols <- roth_symbols
w <- roth_weights
prices <-
getSymbols(symbols, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
library(tidyquant)
library(tidyverse)
library(timeSeries)
library(timetk)
library(broom)
library(highcharter)
library(purrr)
library(PerformanceAnalytics)
roth_symbols <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
roth_weights <- c(.248, .167, .37, .079, .136)
spy <- c("spy")
spyw <- c(1)
num_months <- 120
num_sims <- 1500
symbols <- roth_symbols
w <- roth_weights
prices <-
getSymbols(symbols, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
asset_returns_long <-
prices %>%
to.monthly(indexAt = "lastof", OHLC = FALSE) %>%
tk_tbl(preserve_index = TRUE, rename_index = "date") %>%
gather(asset, returns, -date) %>%
group_by(asset) %>%
mutate(returns = (log(returns) - log(lag(returns)))) %>%
na.omit()
portfolio_returns_tq_rebalanced_yearly <-
asset_returns_long %>%
tq_portfolio(assets_col  = asset,
returns_col = returns,
weights     = w,
col_rename  = "returns",
rebalance_on = "years")
mean_port_return <-
mean(portfolio_returns_tq_rebalanced_yearly$returns)
stddev_port_return <-
sd(portfolio_returns_tq_rebalanced_yearly$returns)
simulated_monthly_returns <- rnorm(num_months,
mean_port_return,
stddev_port_return)
simulation_cumprod <- function(init_value, N, mean, stdev) {
tibble(c(init_value, 1 + rnorm(N, mean, stdev))) %>%
`colnames<-`("returns") %>%
mutate(growth = cumprod(returns)) %>%
select(growth)
}
simulated_returns_add_1 <-
tibble(c(1, 1 + simulated_monthly_returns)) %>%
`colnames<-`("returns")
simulated_growth <-
simulated_returns_add_1 %>%
mutate(growth1 = accumulate(returns, function(x, y) x * y),
growth2 = accumulate(returns, `*`),
growth3 = cumprod(returns)) %>%
select(-returns)
cagr <-
((simulated_growth$growth1[nrow(simulated_growth)]^
(1/10)) - 1) * 100
cagr <- round(cagr, 2)
monte_carlo_sims <-
map_dfc(starts,
simulation_cumprod,
N = num_months,
mean = mean_port_return,
stdev = stddev_port_return)
ending_balances <- as.numeric(monte_carlo_sims[120,])
monte_carlo_sims <-
monte_carlo_sims %>%
mutate(month = seq(1:nrow(.))) %>%
select(month, everything()) %>%
`colnames<-`(c("month", names(starts))) %>%
mutate_all(funs(round(., 2)))
monte_carlo_sims <-
map_dfc(starts,
simulation_cumprod,
N = num_months,
mean = mean_port_return,
stdev = stddev_port_return)
starts <-
rep(1, num_sims) %>%
set_names(paste("sim", 1:num_sims, sep = ""))
monte_carlo_sims <-
map_dfc(starts,
simulation_cumprod,
N = num_months,
mean = mean_port_return,
stdev = stddev_port_return)
ending_balances <- as.numeric(monte_carlo_sims[120,])
hist(ending_balances)
tail(monte_carlo_sims %>%  select(growth1, growth30,
growth90, growth120), 3)
monte_carlo_sims <-
monte_carlo_sims %>%
mutate(month = seq(1:nrow(.))) %>%
select(month, everything()) %>%
`colnames<-`(c("month", names(starts))) %>%
mutate_all(funs(round(., 2)))
monte_carlo_sims %>%
gather(sim, growth, -month) %>%
group_by(sim) %>%
ggplot(aes(x = month, y = growth, color = sim)) +
geom_line() +
theme(legend.position="none")
sim_summary <-
monte_carlo_sims %>%
gather(sim, growth, -month) %>%
group_by(sim) %>%
summarise(final = last(growth)) %>%
summarise(
max = max(final),
min = min(final),
median = median(final))
sim_summary
prices <- getSymbols(tickers, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE)
tickers <- c("FDN", "QQQ", "MCD", "CVS", "TMUS")
start_date <- "2006-01-01" #Format 2016-01-01
#Calculate Returns: Daily -- gathering price data from yahoo, other sources available
prices <- getSymbols(tickers, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE)
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
portfolioPrices <- NULL
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
#Delete all dates with no prices -- removing data errors
portfolioPrices <- na.omit(portfolioPrices)
#Rename Columns -- making the data frame look prettier
colnames(portfolioPrices) <- tickers
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns)
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns)
meanReturns <- colMeans(portfolioReturns)
covMat <- cov(portfolioReturns)
weights <-c("minW= c(.1,.1,.1,.1,.1)", "maxW=c(.4,.4,.4,.4,.4)")
effFrontier <- portfolioFrontier(portfolioReturns, constraints = weights)
mvPort <- minvariancePortfolio(portfolioReturns, constraints = weights)
efficientPort <- efficientPortfolio(portfolioReturns, constraints = weights)
minRiskPort <- minriskPortfolio(portfolioReturns, constraints = weights)
frontierPlot(effFrontier, frontier=c("both"),
col=c("red", "green"),add=FALSE, labels=FALSE,
return=("mean"), risk=c("Sigma"), auto=TRUE,
title=TRUE)
plot(effFrontier, c(7))
mvPort
mvPort <- minvariancePortfolio(portfolioReturns, constraints = weights)
mvPort
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(plotly)
tickers <- c("TLT", "IAU", "UUP", "NLY","MINT",
"LVMUY","CELH","AMZN","PANW","WDC",
"SNAP", "TSLA","GSK", "MRK","GD",
"LMT","NOC","RTN","BA","MDR","XOM",
"PXD","CL", "VZ","FMS","NGG","BAX")
weights <- c("minW=c(.3,.1,.01,.01,.18.0025,.0025, .01,.01,.01,.0025,.0025,.04,.04,.005,.005,.005,.005,.005,.005,.02,.02,.015,.015,.015,.015,.015)",
"maxW=c(.3,.1,.01,.01,.18.015,.015, .015,.015,.015,.01,.01,.06,.06,.01,.01,.01,.01,.01,.01,.03,.03,.035,.035,.035,.035,.035)")
start_date <- "2006-01-01" #Format 2016-01-01
#Calculate Returns: Daily -- gathering price data from yahoo, other sources available
prices <- getSymbols(tickers, src = 'yahoo',
from = "2008-01-01",
to = "2018-10-01",
auto.assign = TRUE, warnings = FALSE)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
setwd("C:\\Users\\patdjm7\\Documents\\RIF\\sev_portfolio\\sev_portfolio") # sets the working directory
start_date <- "2007-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .05 #alpha
risk_free <- .0275 #risk free rate, treasury
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "TSLA","MU",                     #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD",                                           #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"SHY",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"UUP", "NLY",                                           #ALTERNATIVE
"MINT")                                                 #CASH
risk_aversion <- 4 #risk aversion coefficient
portfolioPrices <- NULL #creates the portfolioPrices variable
for (ticker in tickers){ #binds all the portfolio data together into one dataframe
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, src='yahoo',
from = start_date,
to = end_date,
auto.assign =  FALSE,
adjusted = TRUE)[,4])
} # basic wrangling
