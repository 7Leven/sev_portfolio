library(caTools)
library(dplyr)
library(PerformanceAnalytics)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
tickers <- c("CVS", "FDN", "MCD", "TMUS", "QQQ") #List of equities
start_date <- "2008-01-01" #Format 2016-01-01
return_target <- NULL #Format as decimal
risk_target <- NULL #Format as decimal
cash_amt = 0
#Config
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA", "MU",            #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"MINT",                                                 #CASH
"UUP", "NLY")                                           #ALTERNATIVE
start_date <- "2008-01-01" #Format 2016-01-01
return_target <- NULL #Format as decimal
risk_target <- NULL #Format as decimal
cash_amt = 0
#Calculate Returns: Daily -- gathering price data from yahoo, other sources available
portfolioPrices <- NULL
for (ticker in tickers){
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
}
tickers
portfolioPrices
install.packages("ggplot2")
library(ggplot2)
portfolioPrices <- NULL #creates the portfolioPrices variable
for (ticker in tickers){ #binds all the portfolio data together into one dataframe
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(PerformanceAnalytics)
setwd("C:\\Users\\patdj\\Documents\\RIF\\data") # sets the working directory
start_date <- "2016-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .05 #alpha
risk_free <- .0275 #risk free rate, treasury
risk_aversion <- 4 #risk aversion coefficient
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA", "MU",            #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"MINT",                                                 #CASH
"UUP", "NLY")                                           #ALTERNATIVE
prices <- getSymbols(tickers, src = 'yahoo',
from = start_date,
to = end_date,
auto.assign = TRUE, warnings = FALSE)
portfolioPrices <- NULL #creates the portfolioPrices variable
for (ticker in tickers){ #binds all the portfolio data together into one dataframe
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
} # basic wrangling
######################STEP TWO: WRANGING DATA#########################################
#Delete all dates with no prices -- removing data errors
portfolioPrices <- na.omit(portfolioPrices)
#Rename Columns -- making the data frame look prettier
colnames(portfolioPrices) <- tickers
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns) #removes null values
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns) #converts the dataframe to a timeseries
meanReturns <- colMeans(portfolioReturns) #calculates the average return of each ticker
covMat <- cov(portfolioReturns) #covariance matrix
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 50,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
library(fPortfolio)
install.packages("timeSeries")
install.packages("timeSeries")
install.packages("fPortfolio")
install.packages("dplyr")
library(dplyr)
library(PerformanceAnalytics)
library(fPortfolio)
library(timeSeries)
end_date <- substr(Sys.time(), 0, 10) #gets current date
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 50,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
weights <- c("eqsumW[c(LVMUY,CELH)]=c(.02)",
"eqsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"eqsumW[c(GSK, MRK)]=c(.1)",
"eqsumW[c(GD,LMT,NOC,RTN,BA,MDK)]=c(.06)",
"eqsumW[c(XOM,PXD,ARCH)]=c(.05)",
"eqsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"eqsumW[c(TLT)]=c(.3)",
"eqsumW[c(IAU)]=c(.1)",
"eqsumW[c(UUP,NLY)]=c(.02)",
"eqsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("eqsumW[c(LVMUY,CELH)]=c(.02)",
"eqsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"eqsumW[c(GSK, MRK)]=c(.1)",
"eqsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"eqsumW[c(XOM,PXD,ARCH)]=c(.05)",
"eqsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"eqsumW[c(TLT)]=c(.3)",
"eqsumW[c(IAU)]=c(.1)",
"eqsumW[c(UUP,NLY)]=c(.02)",
"eqsumW[c(MINT)]=c(.18)"
)
weights <- c("eqsumW[c(LVMUY,CELH)]=c(.02)",
"eqsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"eqsumW[c(GSK, MRK)]=c(.1)",
"eqsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"eqsumW[c(XOM,PXD,ARCH)]=c(.05)",
"eqsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"eqsumW[c(TLT)]=c(.3)",
"eqsumW[c(IAU)]=c(.1)",
"eqsumW[c(UUP,NLY)]=c(.02)",
"eqsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
warnings()
effFrontier
efficientPort <- efficientPortfolio(portfolioReturns, spec = portSpec, constraints = weights)
efficientPort
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = weights, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 50,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
plot(effFrontier)
#the above functions work, but with new constraints added in, I need more memory to get more results
frontierWeights <- getWeights(effFrontier) # get allocations for each instrument for each point on the efficient frontier
frontierReturns <- getTargetReturn(effFrontier) #generates the return
frontier <- cbind(frontierWeights, frontierReturns) #formats return and weights into a dataframe
frontier
View(frontier)
gc()
weights <- c("minsumW[c(LVMUY,CELH)]=c(.02)",
"minsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minsumW[c(GSK, MRK)]=c(.1)",
"minsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minsumW[c(XOM,PXD,ARCH)]=c(.05)",
"minsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minsumW[c(TLT)]=c(.3)",
"minsumW[c(IAU)]=c(.1)",
"minsumW[c(UUP,NLY)]=c(.02)",
"minsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("minsumW[c(LVMUY,CELH)]=c(.02)",
"minsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minsumW[c(GSK, MRK)]=c(.1)",
"minsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minsumW[c(XOM,PXD,ARCH)]=c(.05)",
"minsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minsumW[c(TLT)]=c(.3)",
"minsumW[c(IAU)]=c(.1)",
"minsumW[c(UUP,NLY)]=c(.02)",
"minsumW[c(MINT)]=c(.18)"
)
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 50,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA", "MU",            #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"UUP", "NLY",                                           #ALTERNATIVE
"MINT")                                                 #CASH
weights <- c("minsumW[c(LVMUY,CELH)]=c(.02)",
"minsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minsumW[c(GSK, MRK)]=c(.1)",
"minsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minsumW[c(XOM,PXD,ARCH)]=c(.05)",
"minsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minsumW[c(TLT)]=c(.3)",
"minsumW[c(IAU)]=c(.1)",
"minsumW[c(UUP,NLY)]=c(.02)",
"minsumW[c(MINT)]=c(.18)"
)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
setwd("C:\\Users\\patdj\\Documents\\RIF\\data") # sets the working directory
start_date <- "2016-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .05 #alpha
risk_free <- .0275 #risk free rate, treasury
risk_aversion <- 4 #risk aversion coefficient
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA", "MU",            #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"UUP", "NLY",                                           #ALTERNATIVE
"MINT")                                                 #CASH
weights <- c("minsumW[c(LVMUY,CELH)]=c(.02)",
"minsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minsumW[c(GSK, MRK)]=c(.1)",
"minsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minsumW[c(XOM,PXD,ARCH)]=c(.05)",
"minsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minsumW[c(TLT)]=c(.3)",
"minsumW[c(IAU)]=c(.1)",
"minsumW[c(UUP,NLY)]=c(.02)",
"minsumW[c(MINT)]=c(.18)"
)
prices <- getSymbols(tickers, src = 'yahoo',
from = start_date,
to = end_date,
auto.assign = TRUE, warnings = FALSE)
portfolioPrices <- NULL #creates the portfolioPrices variable
for (ticker in tickers){ #binds all the portfolio data together into one dataframe
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
} # basic wrangling
######################STEP TWO: WRANGING DATA#########################################
#Delete all dates with no prices -- removing data errors
portfolioPrices <- na.omit(portfolioPrices)
#Rename Columns -- making the data frame look prettier
colnames(portfolioPrices) <- tickers
#Calculate Returns: Daily RoC
portfolioReturns <- CalculateReturns(portfolioPrices)
portfolioReturns <- na.omit(portfolioReturns) #removes null values
# The line below may not be necessary. If errors uncomment
portfolioReturns <- as.timeSeries(portfolioReturns) #converts the dataframe to a timeseries
meanReturns <- colMeans(portfolioReturns) #calculates the average return of each ticker
covMat <- cov(portfolioReturns) #covariance matrix
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 50,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("maxsumW[c(LVMUY,CELH)]=c(.02)",
"maxsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"maxsumW[c(GSK, MRK)]=c(.1)",
"maxsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"maxsumW[c(XOM,PXD,ARCH)]=c(.05)",
"maxsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"maxsumW[c(TLT)]=c(.3)",
"maxsumW[c(IAU)]=c(.1)",
"maxsumW[c(UUP,NLY)]=c(.02)",
"maxsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("eqsumW[c(LVMUY,CELH)]=c(.02)",
"eqsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"eqsumW[c(GSK, MRK)]=c(.1)",
"eqsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"eqsumW[c(XOM,PXD,ARCH)]=c(.05)",
"eqsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"eqsumW[c(TLT)]=c(.3)",
"eqsumW[c(IAU)]=c(.1)",
"eqsumW[c(UUP,NLY)]=c(.02)",
"eqsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
effFrontier
gc()
tickers
count(tickers)
tickers
length(tickers)
tickers[0]
tickers[,1]
tickers[1,]
tickers[1]
tickers[2]
weights <- c(
"minsumW[c(LVMUY,CELH)]=c(.02)", "maxsumW[c(LVMUY,CELH)]=c(.02)",
"minsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)", "maxsumW[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minsumW[c(GSK, MRK)]=c(.1)", "maxsumW[c(GSK, MRK)]=c(.1)",
"minsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)", "maxsumW[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minsumW[c(XOM,PXD,ARCH)]=c(.05)", "maxsumW[c(XOM,PXD,ARCH)]=c(.05)",
"minsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)", "maxsumW[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minsumW[c(TLT)]=c(.3)", "maxsumW[c(TLT)]=c(.3)",
"minsumW[c(IAU)]=c(.1)", "maxsumW[c(IAU)]=c(.1)",
"minsumW[c(UUP,NLY)]=c(.02)", "maxsumW[c(UUP,NLY)]=c(.02)",
"minsumW[c(MINT)]=c(.18)", "maxsumW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, constraints = weights)
test_weights <- c("minB[c(TLT, IAU, UUP, NLY, MINT)] = c(.6)", "maxB[c(TLT, IAU, UUP, NLY, MINT)] = c(.6)",
"minB[c(LVMUY, CELH, AMZN, PANW, WDC,SNAP, TSLA, MU, GSK, MRK, GD,LMT, NOC, RTN, BA, MDR, XOM, PXD, CL, VZ, FMS, NGG, BAX)] = c(.4)",
"maxB[c(LVMUY, CELH, AMZN, PANW, WDC,SNAP, TSLA, MU, GSK, MRK, GD,LMT, NOC, RTN, BA, MDR, XOM, PXD, CL, VZ, FMS, NGG, BAX)] = c(.4)")
test_weights <- c("minB[c(TLT, IAU, UUP, NLY, MINT)] = c(.6)", "maxB[c(TLT, IAU, UUP, NLY, MINT)] = c(.6)",
"minB[c(LVMUY, CELH, AMZN, PANW, WDC,SNAP, TSLA, MU, GSK, MRK, GD,LMT, NOC, RTN, BA, MDR, XOM, PXD, CL, VZ, FMS, NGG, BAX)] = c(.4)",
"maxB[c(LVMUY, CELH, AMZN, PANW, WDC,SNAP, TSLA, MU, GSK, MRK, GD,LMT, NOC, RTN, BA, MDR, XOM, PXD, CL, VZ, FMS, NGG, BAX)] = c(.4)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = test_weights)
help(""getMu")
help(getMu")
help("getMu")
gc()
efmvPort <- minvariancePortfolio(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c(
"minB[c(LVMUY,CELH)]=c(.02)", "maxB[c(LVMUY,CELH)]=c(.02)",
"minB[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)", "maxB[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minB[c(GSK, MRK)]=c(.1)", "maxB[c(GSK, MRK)]=c(.1)",
"minB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)", "maxB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minB[c(XOM,PXD,ARCH)]=c(.05)", "maxB[c(XOM,PXD,ARCH)]=c(.05)",
"minB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)", "maxB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minW[c(TLT)]=c(.3)", "maxW[c(TLT)]=c(.3)",
"minW[c(IAU)]=c(.1)", "maxW[c(IAU)]=c(.1)",
"min[c(UUP,NLY)]=c(.01, .01)", "max[c(UUP,NLY)]=c(.01, .01)",
"minW[c(MINT)]=c(.18)", "maxW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
gc()
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA",                  #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"UUP", "NLY",                                           #ALTERNATIVE
"MINT")                                                 #CASH
weights <- c(
"minB[c(LVMUY,CELH)]=c(.02)", "maxB[c(LVMUY,CELH)]=c(.02)",
"minB[c(AMZN,PANW,WDC,SNAP,TSLA)]=c(.05)", "maxB[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minB[c(GSK, MRK)]=c(.1)", "maxB[c(GSK, MRK)]=c(.1)",
"minB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)", "maxB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minB[c(XOM,PXD,ARCH)]=c(.05)", "maxB[c(XOM,PXD,ARCH)]=c(.05)",
"minB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)", "maxB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minW[c(TLT)]=c(.3)", "maxW[c(TLT)]=c(.3)",
"minW[c(IAU)]=c(.1)", "maxW[c(IAU)]=c(.1)",
"min[c(UUP,NLY)]=c(.01, .01)", "max[c(UUP,NLY)]=c(.01, .01)",
"minW[c(MINT)]=c(.18)", "maxW[c(MINT)]=c(.18)"
)
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
tickers <- c("LVMUY", "CELH",                                        #CONSUMER DISCRETIONARY
"AMZN", "PANW", "WDC", "SNAP", "TSLA",                  #TECH
"GSK", "MRK",                                           #HEALTHCARE
"GD", "LMT", "NOC", "RTN", "BA", "MDR",                 #INDUSTRIALS
"XOM", "PXD", "ARCH",                                   #ENERGY
"CL", "NGG", "VZ", "BAX", "FMS",                        #DEFENSIVE
"TLT",                                                  #FIXED INCOME
"IAU",                                                  #COMMODITIES
"UUP", "NLY",                                           #ALTERNATIVE
"MINT")                                                 #CASH
weights <- c(
"minB[c(LVMUY,CELH)]=c(.02)", "maxB[c(LVMUY,CELH)]=c(.02)",
"minB[c(AMZN,PANW,WDC,SNAP,TSLA)]=c(.05)", "maxB[c(AMZN,PANW,WDC,SNAP,TSLA,MU)]=c(.05)",
"minB[c(GSK, MRK)]=c(.1)", "maxB[c(GSK, MRK)]=c(.1)",
"minB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)", "maxB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minB[c(XOM,PXD,ARCH)]=c(.05)", "maxB[c(XOM,PXD,ARCH)]=c(.05)",
"minB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)", "maxB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minW[c(TLT)]=c(.3)", "maxW[c(TLT)]=c(.3)",
"minW[c(IAU)]=c(.1)", "maxW[c(IAU)]=c(.1)",
"min[c(UUP,NLY)]=c(.01, .01)", "max[c(UUP,NLY)]=c(.01, .01)",
"minW[c(MINT)]=c(.18)", "maxW[c(MINT)]=c(.18)"
)
prices <- getSymbols(tickers, src = 'yahoo',
from = start_date,
to = end_date,
auto.assign = TRUE, warnings = FALSE)
portfolioPrices <- NULL #creates the portfolioPrices variable
for (ticker in tickers){ #binds all the portfolio data together into one dataframe
portfolioPrices <- cbind(portfolioPrices,
getSymbols(ticker, auto.assign =  FALSE)[,4])
} # basic wrangling
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c(
"minB[c(LVMUY,CELH)]=c(.02)", "maxB[c(LVMUY,CELH)]=c(.02)",
"minB[c(AMZN,PANW,WDC,SNAP,TSLA)]=c(.05)", "maxB[c(AMZN,PANW,WDC,SNAP,TSLA)]=c(.05)",
"minB[c(GSK, MRK)]=c(.1)", "maxB[c(GSK, MRK)]=c(.1)",
"minB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)", "maxB[c(GD,LMT,NOC,RTN,BA,MDR)]=c(.06)",
"minB[c(XOM,PXD,ARCH)]=c(.05)", "maxB[c(XOM,PXD,ARCH)]=c(.05)",
"minB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)", "maxB[c(CL,VZ,FMS,NGG,BAX)]=c(.12)",
"minW[c(TLT)]=c(.3)", "maxW[c(TLT)]=c(.3)",
"minW[c(IAU)]=c(.1)", "maxW[c(IAU)]=c(.1)",
"min[c(UUP,NLY)]=c(.01, .01)", "max[c(UUP,NLY)]=c(.01, .01)",
"minW[c(MINT)]=c(.18)", "maxW[c(MINT)]=c(.18)"
)
gc()
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
getMu()
help('getMu')
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free, nFrontierPoints = 60,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
efficientPort <- efficientPortfolio(portfolioReturns, spec = portSpec, constraints = weights)
gc()
efficientPort
efficientPort <- NULL
gc()
weights <- c("minW[1:24]=c(.0025)", "maxW[1:24]=c(.4)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
portfolioFrontier
effFrontier
plot(effFrontier)
efmvPort <- minvariancePortfolio(portfolioReturns, spec = portSpec, constraints = weights)
efmvPort
weights <- c("minW[1:24]=c(.0025)", "maxW[1:24]=c(.4)",
"maxsumW[1:2]=c(.02)", "maxsumW[3:8]=c(.05)",
"maxsumW[9:10]=c(.1)", "maxsumW[11:16]=c(.06)",
"maxsumW[17:19]=c(.05)", "maxsumW[20:24]=c(.12)",
"minW[TLT, IAU, MINT, UUP, NLY] = c(.3, .1, .18, .01, .01)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("minW[1:24]=c(.0025)", "maxW[1:24]=c(.4)",
"maxsumW[1:2]=c(.02)", "maxsumW[3:8]=c(.05)",
"maxsumW[9:10]=c(.1)", "maxsumW[11:16]=c(.06)",
"maxsumW[17:19]=c(.05)", "maxsumW[20:24]=c(.12)",
"minW[25:29] = c(.3, .1, .18, .01, .01)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
weights <- c("minW[1:24]=c(.0025)", "maxW[1:24]=c(.4)",
"maxsumW[1:2]=c(.02)", "maxsumW[3:8]=c(.05)",
"maxsumW[9:10]=c(.1)", "maxsumW[11:16]=c(.06)",
"maxsumW[17:19]=c(.05)", "maxsumW[20:24]=c(.12)",
"minsumW[25]=c(.3)", "minsumW[26]=c(.1)",
"maxsumW[27:28]=c(.02)", "minsumW[29]=c(.18)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = weights)
portfolioReturns
test_weights <- c("minW[1:24]=c(.0025)", "maxsumW[1:24]=c(.4)")
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolioReturns, spec = portSpec, constraints = test_weights)
